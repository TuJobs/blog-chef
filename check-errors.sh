#!/bin/bash

# Script ki·ªÉm tra l·ªói cho Blog Chef
echo "üîç ƒêang ki·ªÉm tra l·ªói Blog Chef..."
echo "=================================="

# Ki·ªÉm tra directory hi·ªán t·∫°i
if [ ! -f "package.json" ]; then
    echo "‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y package.json"
    echo "Vui l√≤ng ch·∫°y script n√†y t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n"
    exit 1
fi

echo "‚úÖ ƒêang ·ªü ƒë√∫ng th∆∞ m·ª•c d·ª± √°n"

# Ki·ªÉm tra node_modules
if [ ! -d "node_modules" ]; then
    echo "‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y node_modules"
    echo "ƒêang c√†i ƒë·∫∑t dependencies..."
    npm install
fi

echo "‚úÖ Dependencies ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"

# Ki·ªÉm tra build
echo "üî® ƒêang ki·ªÉm tra build..."
npm run build > build.log 2>&1
BUILD_EXIT_CODE=$?

if [ $BUILD_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ Build th√†nh c√¥ng"
else
    echo "‚ùå L·ªñI BUILD:"
    cat build.log
    exit 1
fi

# Ki·ªÉm tra type checking
echo "üìù ƒêang ki·ªÉm tra TypeScript..."
npm run type-check > typecheck.log 2>&1
TYPE_EXIT_CODE=$?

if [ $TYPE_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ TypeScript OK"
else
    echo "‚ö†Ô∏è  TypeScript c√≥ warnings:"
    cat typecheck.log
fi

# Ki·ªÉm tra linting
echo "üßπ ƒêang ki·ªÉm tra ESLint..."
npm run lint > lint.log 2>&1
LINT_EXIT_CODE=$?

if [ $LINT_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ ESLint OK"
else
    echo "‚ö†Ô∏è  ESLint c√≥ warnings:"
    cat lint.log
fi

# Ki·ªÉm tra file c·∫•u h√¨nh quan tr·ªçng
echo "‚öôÔ∏è  Ki·ªÉm tra c·∫•u h√¨nh..."

if [ ! -f "next.config.ts" ]; then
    echo "‚ùå L·ªñI: Thi·∫øu next.config.ts"
    exit 1
else
    echo "‚úÖ next.config.ts t·ªìn t·∫°i"
fi

if [ ! -f "tailwind.config.ts" ]; then
    echo "‚ùå L·ªñI: Thi·∫øu tailwind.config.ts"
    exit 1
else
    echo "‚úÖ tailwind.config.ts t·ªìn t·∫°i"
fi

# Ki·ªÉm tra data directory
if [ ! -d "data" ]; then
    echo "‚ö†Ô∏è  Thi·∫øu th∆∞ m·ª•c data, ƒëang t·∫°o..."
    mkdir -p data
    echo '[]' > data/users.json
    echo '[]' > data/posts.json
    echo '[]' > data/comments.json
    echo '[]' > data/reactions.json
    echo "‚úÖ ƒê√£ t·∫°o data directory"
else
    echo "‚úÖ Data directory t·ªìn t·∫°i"
fi

# Ki·ªÉm tra uploads directory
if [ ! -d "public/uploads" ]; then
    echo "‚ö†Ô∏è  Thi·∫øu th∆∞ m·ª•c uploads, ƒëang t·∫°o..."
    mkdir -p public/uploads
    echo "‚úÖ ƒê√£ t·∫°o uploads directory"
else
    echo "‚úÖ Uploads directory t·ªìn t·∫°i"
fi

# Test ch·∫°y server (background)
echo "üöÄ Ki·ªÉm tra server..."
npm run start:production &
SERVER_PID=$!

# ƒê·ª£i server kh·ªüi ƒë·ªông
sleep 10

# Ki·ªÉm tra server c√≥ ch·∫°y kh√¥ng
if curl -f -s http://localhost:3000/api/health > /dev/null; then
    echo "‚úÖ Server ch·∫°y th√†nh c√¥ng!"
    echo "‚úÖ Health check OK"
else
    echo "‚ùå Server kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ho·∫∑c health check th·∫•t b·∫°i"
fi

# D·ª´ng server
kill $SERVER_PID 2>/dev/null

# T√≥m t·∫Øt
echo ""
echo "üìä T√ìM T·∫ÆT KI·ªÇM TRA:"
echo "=================================="
echo "Build: $([ $BUILD_EXIT_CODE -eq 0 ] && echo '‚úÖ Th√†nh c√¥ng' || echo '‚ùå Th·∫•t b·∫°i')"
echo "TypeScript: $([ $TYPE_EXIT_CODE -eq 0 ] && echo '‚úÖ OK' || echo '‚ö†Ô∏è C√≥ warnings')"
echo "ESLint: $([ $LINT_EXIT_CODE -eq 0 ] && echo '‚úÖ OK' || echo '‚ö†Ô∏è C√≥ warnings')"
echo ""

if [ $BUILD_EXIT_CODE -eq 0 ]; then
    echo "üéâ D·ª± √°n s·∫µn s√†ng deploy!"
    echo "Ch·∫°y l·ªánh sau ƒë·ªÉ deploy:"
    echo "  - Vercel: npx vercel --prod"
    echo "  - Docker: docker build -t blog-chef ."
    echo "  - Manual: npm run start:production"
else
    echo "‚ùå Vui l√≤ng s·ª≠a c√°c l·ªói build tr∆∞·ªõc khi deploy"
fi

# Clean up log files
rm -f build.log typecheck.log lint.log
